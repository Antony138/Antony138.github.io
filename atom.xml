<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Antony’s Blog</title>
  
  <subtitle>i am looking for FREEDOM.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://antony138.github.io/"/>
  <updated>2017-11-06T00:16:43.000Z</updated>
  <id>https://antony138.github.io/</id>
  
  <author>
    <name>Antony Wong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Objective-C RunTime概览</title>
    <link href="https://antony138.github.io/2017/11/06/Objective-C-RunTime%E6%A6%82%E8%A7%88/"/>
    <id>https://antony138.github.io/2017/11/06/Objective-C-RunTime概览/</id>
    <published>2017-11-06T00:15:05.000Z</published>
    <updated>2017-11-06T00:16:43.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>本文为入门介绍，希望能让第一次接触Runtime概念的朋友有一个概貌了解。</em></p><p>一篇文章，不可能讲完Runtime的全部，但是，分成很多篇讲，又有点「见树木不见森林」的迷糊感觉——自己就是看了很多关于Runtime的文章，看完还是「迷雾重重」(当然，也可能因为资质太过平庸)。</p><p>所以，这一篇，尽量涉及。</p><h2 id="一句话概括"><a href="#一句话概括" class="headerlink" title="一句话概括"></a>一句话概括</h2><p>什么是Runtime？作以下引述。但也不要太奢望看完这些说明后，就会豁然开朗。</p><p>官方文档[Objective-C Runtime]：(<a href="https://developer.apple.com/documentation/objectivec/objective_c_runtime" target="_blank" rel="external">https://developer.apple.com/documentation/objectivec/objective_c_runtime</a>)</p><blockquote><p>The Objective-C runtime is a runtime library that provides support for the dynamic properties of the Objective-C language, and as such is linked to by all Objective-C apps. </p><p>Objective-C的runtime是一个「运行时库」，为OC这门语言提供动态的特性，所有OC应用程序都与之相关联。</p></blockquote><p><a href="https://novemberfive.co/blog/objective-c-runtime/" target="_blank" rel="external">The down low on Objective-C Runtime</a>：</p><blockquote><p>The Objective-C Runtime is an open source library written in C and Assembler that adds the Object Oriented capabilities to C to create the Objective-C language.</p><p>Objective-C的Runtime，是一个用C和汇编写的「开源库」，它为C添加了面向对象的特性，从而成就了Objrctive-C这门语言。</p><p>The Objective-C languages defers as many decisions as it can from compile time and link time to runtime. Whenever possible, it does things dynamically. This means that the language requires not just a compiler, but also a runtime system to execute the compiled code. The runtime system acts as a kind of operating system for the Objective-C language, it’s what makes the language work. </p><p>Objective-C可以从『编译时』、『链接时』再到『运行时』，hold住尽可能多的决策。只要有可能，它都是动态地干活儿的。这就意味着，这门语言不仅需要一个编译器，还需要一个runtime系统，用来执行编译的代码。这个runtime系统就好比如是Objective-C的「操作系统」，(runtime系统)让这门语言能工作起来。</p></blockquote><p>简单点理解，Runtime就是一个C和汇编写的代码库——是Objective-C之所以成为Objective-C的一个库。</p><p>用一图以助理解：</p><p><img src="http://upload-images.jianshu.io/upload_images/298822-12de1d218ac9c905.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Runtime概览"></p><p>另外，可参考: <a href="http://blog.sunnyxx.com/2016/08/13/reunderstanding-runtime-0/" target="_blank" rel="external">重识 Objective-C Runtime - Smalltalk 与 C 的融合</a></p><h2 id="Runtime的三个头文件"><a href="#Runtime的三个头文件" class="headerlink" title="Runtime的三个头文件"></a>Runtime的三个头文件</h2><p><a href="https://opensource.apple.com/source/objc4/" target="_blank" rel="external">Runtime</a>这个库是开源的。有兴(能)趣(力)的朋友可以仔细研究。</p><p>而平时我们会用到的Runtime函数，基本上在<code>runtime.h</code>, <code>objc.h</code>, <code>message.h</code>这三个头文件中。代码2500行+(主要是<code>runtime.h</code>)</p><h3 id="runtime-h"><a href="#runtime-h" class="headerlink" title="runtime.h"></a>runtime.h</h3><p>runtime.h中定义了若干「类型(Types)」和「函数(Functions)」。</p><p>有我们比较熟悉的<code>Method</code>，<code>Ivar</code>，<code>Category</code>，<code>objc_property_t</code>，<code>objc_class</code>类型，都在这里定义。</p><p>另外还有106个函数。如常见的：</p><p><code>object_copy()</code>, <code>class_respondsToSelector()</code>, <code>class_copyMethodList</code>等都在这里面。</p><h3 id="objc-h"><a href="#objc-h" class="headerlink" title="objc.h"></a>objc.h</h3><p>objc.h中定义了<code>Class</code>, <code>id</code>, <code>SEL</code>, <code>IMP</code>类型。</p><p>另外还有6个函数。</p><h3 id="message-h"><a href="#message-h" class="headerlink" title="message.h"></a>message.h</h3><p>声明了一系列的方法执行函数。</p><p><code>objc_msgSend()</code>、<code>objc_msgSendSuper()</code>都定义在这里。</p><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><h3 id="isa"><a href="#isa" class="headerlink" title="isa"></a>isa</h3><p>isa是一个指针，隐式地存在于实例对象、类中，对象的isa指针指向所属类——因此实例对象能知道自己属于哪个类；类的isa指针指向一个叫「元类(Meta Class))」的玩意儿。</p><p><code>isa</code>指针在三个地方有定义：</p><ul><li><code>objc_class</code>结构体有声明，指向类的meta类。(在<code>runtime.h</code>)</li><li><code>objc_object</code>结构体有声明，指向对象所属类(在<code>objc.h</code>)</li><li><code>NSObject</code>类有有声明，指向对象所属类；(在<code>NSObject.h</code>)</li></ul><h3 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h3><p><code>Class</code>定义在<code>objc.h</code>中第37、38行，是一个指向<code>objc_class</code>结构体的指针。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/// An opaque type that represents an Objective-C class.</div><div class="line">typedef struct objc_class *Class;</div></pre></td></tr></table></figure><p>So, <code>Class</code>就是一个「指针变量」。</p><p>而<code>objc_class</code>结构体在<code>runtime.h</code>第55-70行中有定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">struct objc_class &#123;</div><div class="line">    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;// isa指针, 指向一个meta类，侧面印证：「类也是对象」</div><div class="line"></div><div class="line">#if !__OBJC2__</div><div class="line">    Class _Nullable super_class                              OBJC2_UNAVAILABLE;// 指向父类</div><div class="line">    const char * _Nonnull name                               OBJC2_UNAVAILABLE;</div><div class="line">    long version                                             OBJC2_UNAVAILABLE;</div><div class="line">    long info                                                OBJC2_UNAVAILABLE;</div><div class="line">    long instance_size                                       OBJC2_UNAVAILABLE;</div><div class="line">    struct objc_ivar_list * _Nullable ivars                  OBJC2_UNAVAILABLE;// 变量列表</div><div class="line">    struct objc_method_list * _Nullable * _Nullable methodLists                    OBJC2_UNAVAILABLE;// 方法列表, 注意是有两个星号的</div><div class="line">    struct objc_cache * _Nonnull cache                       OBJC2_UNAVAILABLE;// 用于缓存方法</div><div class="line">    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;// 协议</div><div class="line">#endif</div><div class="line"></div><div class="line">&#125; OBJC2_UNAVAILABLE;</div><div class="line">/* Use `Class` instead of `struct objc_class *` */</div></pre></td></tr></table></figure><p>这个结构体，包括：isa指针、父类指针、类名、成员变量、方法列表、缓存以及协议列表等。</p><p>解读一下部分成员：</p><p> <strong>isa指针</strong><br>上面介绍isa的时候，说过类也有一个<code>isa</code>指针，我们可以理解为：<strong>类本身也是一个对象</strong>——「类对象」。是「元类(Meta Class)」的实例(每个类的isa指针指向元类)。</p><p>我们熟知的「类方法」，也可以理解为是「类对象」的实例方法。</p><p>而这些「元类(Meta Class)」则是「根源类(Root Meta Class)」的实例——所有元类的isa指针最终都指向根元类。根元类的isa指针指向自己，最终完成闭环。</p><p>画了一张示意图帮助理解：</p><p><img src="http://upload-images.jianshu.io/upload_images/298822-a5b670132901bb3b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="isa的指针的指向"></p><p><strong>struct objc_ivar_list</strong><br><code>struct objc_ivar_list</code>(<code>ivars</code>)，是实例变量列表，保存类所声明的所有实例变量。</p><p><strong>objc_method_list</strong><br><code>struct objc_method_list</code>(<code>methodLists</code>)是方法列表，给某个对象发送消息，就是来这个列表中查找是否有相应方法实现的。</p><p>可以动态修改<code>methodLists</code>的值来添加成员方法，这也是Category的实现原理。</p><p><strong>struct objc_cache</strong><br><code>struct objc_cache</code>(<code>cache</code>)，用于缓存方法，调用过的方法会缓存到这里，方便以后索引，提高速度。</p><h3 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h3><p>定义在<code>runtime.h</code>第44行，表示一个方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/// An opaque type that represents a method in a class definition.</div><div class="line">typedef struct objc_method *Method;</div></pre></td></tr></table></figure><p>objc_method结构体存储了方法名、方法类型和方法实现。</p><h3 id="SEL"><a href="#SEL" class="headerlink" title="SEL"></a>SEL</h3><p>定义在<code>objc.h</code>第49、50行中，表示一个方法选择器(可以简单点，理解为方法名，一个C语言的字符串)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/// An opaque type that represents a method selector.</div><div class="line">typedef struct objc_selector *SEL;</div></pre></td></tr></table></figure><h3 id="IMP"><a href="#IMP" class="headerlink" title="IMP"></a>IMP</h3><p>定义在<code>objc.h</code>第54行，表示一个方法的实现。由这个函数指针决定最终执行哪段代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">/// A pointer to the function of a method implementation. </div><div class="line">#if !OBJC_OLD_DISPATCH_PROTOTYPES</div><div class="line">typedef void (*IMP)(void /* id, SEL, ... */ ); </div><div class="line">#else</div><div class="line">typedef id _Nullable (*IMP)(id _Nonnull, SEL _Nonnull, ...); </div><div class="line">#endif</div></pre></td></tr></table></figure><p><strong><code>Method</code> ， <code>SEL</code>和<code>IMP</code>有什么区别？</strong></p><ul><li><code>Method</code>：表示一个方法，本质是一个指向<code>objc_method</code>结构体的指针。</li><li><code>SEL</code>(Selector)：在运行时用来代表一个方法的名字。</li><li><code>IMP</code>(Implementation)：表示方法的实现部分。第一个参数id指向调用方法的自身，第二个参数是方法的名字seletor，方法的参数紧随其后。</li></ul><blockquote><p>在消息发送的过程中，这三个概念是可以互相转换的。</p></blockquote><p>可以这样理解：</p><p>Runtime中，Class维护了一份分发列表(dispatch table)，用于消息分发；列表中每个入口，就是一个方法(Method)，这份列表的key是selector(SEL)，value是implementation(IMP)。</p><p>而后面介绍到的Method Swizzling，就是改变这份列表某两个方法的SEL和IMP的对应关系，让seletor对应一个不同的implementation。</p><p>（也有人比喻：SLE是门牌号码，IMP是住户）</p><h3 id="id"><a href="#id" class="headerlink" title="id"></a>id</h3><p>定义在<code>objc.h</code>第45、46行中，表示一个类的实例对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/// A pointer to an instance of a class.</div><div class="line">typedef struct objc_object *id;</div></pre></td></tr></table></figure><p>而<code>objc_object</code>这个结构体，定义在<code>objc.h</code>中，这个结构体只有一个指向类的isa指针。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/// Represents an instance of a class.</div><div class="line">struct objc_object &#123;</div><div class="line">    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h3 id="Ivar"><a href="#Ivar" class="headerlink" title="Ivar"></a>Ivar</h3><p>定义在<code>runtime.h</code>第44行，表示一个实例变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/// An opaque type that represents an instance variable.</div><div class="line">typedef struct objc_ivar *Ivar;</div></pre></td></tr></table></figure><h3 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h3><p>定义在<code>runtime.h</code>第1841行。</p><p><code>typedef struct objc_cache *Cache                             OBJC2_UNAVAILABLE;</code></p><p>Cache的存在，是为方法调用时的性能优化：实例对象收到消息后，会先从Cache中查找，看是否有方法的实现——Runtime会把调用过的方法缓存到Cache中。</p><h3 id="objc-property-t"><a href="#objc-property-t" class="headerlink" title="objc_property_t"></a>objc_property_t</h3><p>定义在<code>runtime.h</code>第52，53行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/// An opaque type that represents an Objective-C declared property.</div><div class="line">typedef struct objc_property *objc_property_t;</div></pre></td></tr></table></figure><p>表示Objective-C中的属性。</p><h3 id="Category"><a href="#Category" class="headerlink" title="Category"></a>Category</h3><p><code>runtime.h</code>第49,50行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/// An opaque type that represents a category.</div><div class="line">typedef struct objc_category *Category;</div></pre></td></tr></table></figure><p><code>objc_category</code>结构体定义在第1784-1790行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">struct objc_category &#123;</div><div class="line">    char * _Nonnull category_name                            OBJC2_UNAVAILABLE;</div><div class="line">    char * _Nonnull class_name                               OBJC2_UNAVAILABLE;</div><div class="line">    struct objc_method_list * _Nullable instance_methods     OBJC2_UNAVAILABLE;</div><div class="line">    struct objc_method_list * _Nullable class_methods        OBJC2_UNAVAILABLE;</div><div class="line">    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;</div><div class="line">&#125;                                                            OBJC2_UNAVAILABLE;</div></pre></td></tr></table></figure><p>Category可以动态的地为已存在的类添加新的方法。</p><h3 id="self-amp-super"><a href="#self-amp-super" class="headerlink" title="self &amp; super"></a>self &amp; super</h3><p>先做个实验：</p><p>打印：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NSLog(@&quot;[self class]:%@; [super class]:%@&quot;, NSStringFromClass([self class]), NSStringFromClass([super class]));</div></pre></td></tr></table></figure></p><p>结果，<code>[self class]</code>和<code>[super class]</code>的值是一样的。 Why？不应该打印一个子类，一个父类吗？</p><p><strong>self</strong>，是一个隐藏参数，隐藏在<code>objc_msgSend(id _Nullable self, SEL _Nonnull op, ...)</code>函数中，发送的所有方法，第一个参数都是self。</p><p>而<strong>super</strong>不是隐藏参数，是一个「编译器标示符」，它告诉编译器，调用父类的方法，而不是本类的方法。但是，这时候实际上的消息的接收者，还是self。</p><p>详解解读：</p><ul><li><p>执行<code>[super class]</code>，会先调用<code>objc_msgSendSuper(struct objc_super * _Nonnull super, SEL _Nonnull op, ...)</code>函数；</p></li><li><p>再根据<code>objc_super</code>结构体的<code>super_class</code>去查找方法实现，，最后调用<code>objc_msgSend(id _Nullable self, SEL _Nonnull op, ...)</code>执行方法的实现。 所以，最后的接收器还是self。</p></li></ul><p>因此，上述打印结果的值是一样的。</p><h2 id="消息的传递流程"><a href="#消息的传递流程" class="headerlink" title="消息的传递流程"></a>消息的传递流程</h2><p>关于OC中的消息传递流程，画了一张图以帮助理解(流程由下往上)：</p><p><img src="http://upload-images.jianshu.io/upload_images/298822-be869e8e8ae2d6b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="消息传递流程"></p><p>Objective-C的消息传递流程，个人划分为<strong>三部分</strong>：</p><ul><li>正常的消息传递(Messaging)</li><li>消息动态解析(Dynamic Method Resolution)</li><li>消息转发(Message Forwarding)又分2小步：<ul><li>Fast forwarding</li><li>Normal forwarding</li></ul></li></ul><p>第一部分，叫做「正常的消息传递」，那理所当然，后面的就是「不正常」了。事实是：如果能找到方法的实现(IMP/implementation)，就不会跳到后面。</p><h2 id="Runtime应用"><a href="#Runtime应用" class="headerlink" title="Runtime应用"></a>Runtime应用</h2><h3 id="1-获取类的相关情况"><a href="#1-获取类的相关情况" class="headerlink" title="1.获取类的相关情况"></a>1.获取类的相关情况</h3><p>比如，我想创建一个类似UITableView的类，然后打算参考一下官方的这个类都声明了哪些方法，可以用以下方式查看（头文件声明的方法并不是全部方法）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">/* 获取某个类的方法列表(所有方法) */</div><div class="line">// 这样获取是实例方法(不是类方法)</div><div class="line">Method *methods = class_copyMethodList([UITableView class], &amp;outCount);</div><div class="line">for (NSUInteger methodIndex = 0 ; methodIndex &lt; outCount; methodIndex ++) &#123;</div><div class="line">    SEL name = method_getName(methods[methodIndex]);</div><div class="line">    NSLog(@&quot;Human-例法方实-%@&quot;,NSStringFromSelector(name));</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>还有很多其他函数：<code>class_getInstanceVariable()</code>, <code>objc_getMetaClass()</code>, <code>class_getClassVariable()</code>等等。</p><h3 id="2-动态添加方法的实现"><a href="#2-动态添加方法的实现" class="headerlink" title="2.动态添加方法的实现"></a>2.动态添加方法的实现</h3><p>比如，我们用了某个闭源的框架，不幸地，有个bug是：某方法没有实现，导致crash：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[Animal jump]: unrecognized selector sent to instance</div></pre></td></tr></table></figure><p>这时候如果等闭源框架的debug更新，比较被动。而利用Runtime，可以动态地添加方法的实现，防止crash：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">#import &quot;Bird.h&quot;</div><div class="line">#import &lt;objc/runtime.h&gt;</div><div class="line"></div><div class="line">// 创建Animal的子类Bird</div><div class="line">@implementation Bird</div><div class="line"></div><div class="line">// 如果没有找到实例方法的实现, 就会回调跳到这里</div><div class="line">+ (BOOL)resolveInstanceMethod:(SEL)sel &#123;</div><div class="line">    if (sel == @selector(jump)) &#123;</div><div class="line">        // 利用Runtime的class_addMethod()函数, 动态添加方法的实现</div><div class="line">        class_addMethod(self, sel, (IMP)jumpImp, &quot;v@:&quot;);</div><div class="line">        return YES;</div><div class="line">    &#125;</div><div class="line">    return [super resolveInstanceMethod:sel];</div><div class="line">&#125;</div><div class="line"></div><div class="line">void jumpImp(id obj, SEL _cmd) &#123;</div><div class="line">    NSLog(@&quot;执行了jumpImp(动态添加的方法实现)&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure><h3 id="3-Method-Swizzling"><a href="#3-Method-Swizzling" class="headerlink" title="3.Method Swizzling"></a>3.Method Swizzling</h3><p>Method Swizzling，可以理解为「交换方法的实现(IMP)」，这是网友的说法，官方并没有这种说法，可见苹果官方应该是不提倡这样做的。</p><p>假如有个需求：需要记录App每个页面进入的次数(这个需求和<a href="http://nshipster.cn/method-swizzling/" target="_blank" rel="external">Method Swizzling</a>介绍的一样)</p><p>我们可以在viewWillAppear:方法中作一些计数处理。但是，每个页面都要写重复的代码。在这里就可以使用Method Swizzling，「动态地」在官方的基础上增加一些代码，以实现需求。</p><p>需要新建一个UIViewController的Category，在load方法中实现互换。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">#import &quot;UIViewController+Tracking.h&quot;</div><div class="line">#import &lt;objc/runtime.h&gt;</div><div class="line"></div><div class="line">@implementation UIViewController (Tracking)</div><div class="line"></div><div class="line">+ (void)load &#123;</div><div class="line">    static dispatch_once_t onceToken;</div><div class="line">    dispatch_once(&amp;onceToken, ^&#123;</div><div class="line">        Class class = [self class];</div><div class="line">        </div><div class="line">        // 拿到两个Method对象</div><div class="line">        SEL originalSelector = @selector(viewWillAppear:);</div><div class="line">        SEL swizzledSelector = @selector(antony_viewWillAppear:);</div><div class="line">        </div><div class="line">        Method orignalMethod = class_getInstanceMethod(class, originalSelector);</div><div class="line">        Method swizzledMethod = class_getInstanceMethod(class, swizzledSelector);</div><div class="line"></div><div class="line">        BOOL didAddMethod = class_addMethod(class, originalSelector, method_getImplementation(swizzledMethod), method_getTypeEncoding(swizzledMethod));</div><div class="line">        </div><div class="line">        if (didAddMethod == YES) &#123;</div><div class="line">            class_replaceMethod(class, swizzledSelector, method_getImplementation(orignalMethod), method_getTypeEncoding(orignalMethod));</div><div class="line">        &#125;</div><div class="line">        else &#123;</div><div class="line">            // 利用method_exchangeImplementations()函数交换两个Method的实现</div><div class="line">            method_exchangeImplementations(orignalMethod, swizzledMethod);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">#pragma mark - Method Swizzling</div><div class="line">- (void)antony_viewWillAppear:(BOOL)animated &#123;</div><div class="line">    // 因为互换了方法, 这里实际调用的是viewWillAppear:的IMP(不会造成递归)</div><div class="line">    [self antony_viewWillAppear:animated];</div><div class="line"></div><div class="line">    // 在这里增加你要的功能</div><div class="line">    NSLog(@&quot;这是在viewWillAppear:新增的内容&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure></p><p>核心就是用<code>method_exchangeImplementations()</code>函数，互换了viewWillAppear:和antony_viewWillAppear:的实现。</p><p>而如果现在创建控制器对象，实际流程是这样的：</p><ul><li><code>viewWillAppea:</code>被执行（实际上执行上述Category的<code>antony_viewWillAppear:</code>方法）</li><li><code>antony_viewWillAppear:</code>方法内又调用了<code>antony_viewWillAppear:</code>（实际上执行的是系统的<code>viewWillAppear:</code>方法——因为互换了）</li><li>最后再执行我们自己添加的代码——这样就实现了需求：所有UIViewController在执行 <code>viewWillAppear:</code>时, 都会调用你增加的代码。从而无须在所有的UIViewController中重复写这部分代码。</li></ul><p>Github有个框架：<a href="https://github.com/steipete/Aspects" target="_blank" rel="external">Aspects</a>，就是用Runtime的Method Swizzling实现的，它允许你往任意现存类或实例添加额外的代码。</p><h3 id="4-动态添加属性-利用Associated-Objects-Associative-References"><a href="#4-动态添加属性-利用Associated-Objects-Associative-References" class="headerlink" title="4.动态添加属性 - 利用Associated Objects(Associative References)"></a>4.动态添加属性 - 利用Associated Objects(Associative References)</h3><p>Associative References(关联引用/对象)，在runtime.h中定义的三个相关函数:</p><ul><li>objc_setAssociatedObject()</li><li>objc_getAssociatedObject()</li><li>objc_removeAssociatedObjects()</li></ul><p>有什么作用呢？</p><p>网上有种说法：OC中的Category不能添加属性。</p><p>其实严格来说：Category不能添加的是「实例变量」，而属性其实是可以添加的：</p><ul><li><p>不能为Category添加实例变量；否则报错:<code>Instance variables may not be placed in categories</code></p></li><li><p>但是可以为Category添加属性，也可以自定义setter、getter，外部也可以访问；但是，这个属性是<strong>无意义</strong>的，因为不能保存数据(可以返回值，但是不能赋值)。而不能保存数据的原因，是因为没有实例变量「装」数据；</p></li></ul><p>而Associated Objects(关联对象)，则可以为Category提供保存数据的地方。</p><p>因此Associated Objects(关联对象)就可以：给已有类(封闭的类)添加真正有意义的属性——可以保存数据的属性。</p><p>比如，我们要为一个叫做Human的类添加一个属性nickName，就可以：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">#import &quot;Human+AdditionalProperties.h&quot;</div><div class="line">#import &lt;objc/runtime.h&gt;</div><div class="line"></div><div class="line">@implementation Human (AdditionalProperties)</div><div class="line">@dynamic nickName;</div><div class="line"></div><div class="line">// 如果要删除该属性,调用objc_setAssociatedObject()赋值为nil即可,</div><div class="line">// 不要用objc_removeAssociatedObjects(), 该函数会删除所有添加的属性</div><div class="line">- (void)setNickName:(NSString *)nickName &#123;</div><div class="line">    // 参数1: 为哪个对象实现的关联</div><div class="line">    // 参数2: 这个关联的key(可以用SEL作为key)</div><div class="line">    // 参数3: 需要与对应key(参数2)关联的值(就是外部传入的值)</div><div class="line">    // 参数4: 关联的策略(和属性的attribute相对应)</div><div class="line">    objc_setAssociatedObject(self, @selector(nickName), nickName, OBJC_ASSOCIATION_COPY_NONATOMIC);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (NSString *)nickName &#123;</div><div class="line">    // 参数1: 为哪个对象实现的关联</div><div class="line">    // 参数2: 该关联的key</div><div class="line">    return objc_getAssociatedObject(self, @selector(nickName));</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure><p>需要再次强调的是：通过Associated Objects为类添加有意义的属性，事实上并不是添加了实例变量，而是通过关联，使属性有保存数据的能力。（可以用<code>class_copyPropertyList()</code>验证，并没有增加实例变量。或者断点看该类的实例，并不会看到有添加了实例变量——虽然能用该属性来存取数据。）</p><h3 id="5-归档和解档-一键序列化"><a href="#5-归档和解档-一键序列化" class="headerlink" title="5.归档和解档 一键序列化:"></a>5.归档和解档 一键序列化:</h3><p>有用过<code>NSKeyedArchiver</code>固化自定义对象到沙盒的朋友应该了解，当一个自定义对象有很多属性，需要一个一个encode(编码)或者decode(解码)，是很琐屑的，比如：</p><p><img src="http://upload-images.jianshu.io/upload_images/298822-a3902a06e9d894d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="自定义类有很多属性"></p><p>而利用Runtime，则可以简化这个过程——无论类有多少属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">- (instancetype)initWithCoder:(NSCoder *)aDecoder &#123;</div><div class="line">    self = [super init];</div><div class="line">    if (self) &#123;</div><div class="line">        unsigned int count = 0;</div><div class="line">        // 利用class_copyIvarList()拿到类的所有实例变量</div><div class="line">        Ivar *ivars = class_copyIvarList([self class], &amp;count);</div><div class="line">        // 再用for循环一次性解档</div><div class="line">        for (int i = 0; i &lt; count; i++) &#123;</div><div class="line">            Ivar ivar = ivars[i];</div><div class="line">            NSString *key = [NSString stringWithUTF8String:ivar_getName(ivar)];</div><div class="line">            id value = [aDecoder decodeObjectForKey:key];</div><div class="line">            [self setValue:value forKey:key];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)encodeWithCoder:(NSCoder *)aCoder &#123;</div><div class="line">    unsigned int count = 0;</div><div class="line">    // 利用class_copyIvarList()拿到类的所有实例变量</div><div class="line">    Ivar *ivars = class_copyIvarList([self class], &amp;count);</div><div class="line">    // 再用for循环一次性归档</div><div class="line">    for (int i = 0; i &lt; count; i++) &#123;</div><div class="line">        Ivar ivar = ivars[i];</div><div class="line">        NSString *key = [NSString stringWithUTF8String:ivar_getName(ivar)];</div><div class="line">        id object = [self valueForKey:key];</div><div class="line">        [aCoder encodeObject:object forKey:key];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Runtime还有很多应用，有兴趣可以继续找相关资料学习。不过：</p><blockquote><p>Objective-C的Runtime就像一把双刃剑，使用它，风险高，回报也高。它赋予你很大的权力，但只要你犯了哪怕一丁点儿错误，都有可能让程序挂掉。</p></blockquote><p>所以，总原则：能不用，尽量不用。</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>到这里，估计还是有很多黑人问号：Runtime究竟是什么玩意儿？ What the hell is Runtime?？</p><p>这很正常，学习本来就是一个重复的过程——特别是面对学习曲线还比较陡峭的知识。继续实践、温故知新，相信后面会有更好的了解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;本文为入门介绍，希望能让第一次接触Runtime概念的朋友有一个概貌了解。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;一篇文章，不可能讲完Runtime的全部，但是，分成很多篇讲，又有点「见树木不见森林」的迷糊感觉——自己就是看了很多关于Runtime的文章，看完还是「迷雾重重」(当
      
    
    </summary>
    
    
      <category term="Technical" scheme="https://antony138.github.io/tags/Technical/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C属性(property)的特性(attribute)</title>
    <link href="https://antony138.github.io/2017/10/17/Objective-C%E5%B1%9E%E6%80%A7-property-%E7%9A%84%E7%89%B9%E6%80%A7-attribute/"/>
    <id>https://antony138.github.io/2017/10/17/Objective-C属性-property-的特性-attribute/</id>
    <published>2017-10-17T07:09:37.000Z</published>
    <updated>2017-10-17T07:17:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>先以一图总结：</p><p><img src="http://upload-images.jianshu.io/upload_images/298822-a2eb8681c3678f5e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Atttributes"></p><p>以下：「attribute(s)」，「特性」是指同一事物(都指<code>@property</code>后面括号内的单词)。</p><p>用Objective-C做过开发的朋友都知道，类里面的属性(可以近似地理解为类的变量)是用<code>@property</code>关键字定义的，然后<code>@property</code>后面的括号，会写上若干「特性(attribute)」，后面跟数据类型、属性名称。如：</p><p><code>@property (copy, nonatomic) NSString *name;</code></p><p>写OC良久，对括号内的这些attributes，还是一知半解、不知其然，亦不知其所以然。用的时候就照葫芦画瓢。</p><p>现在大伙儿慢慢转向苹果的新开发语言Swift，似乎亦不必花太多时间在Objective-C上。</p><p>不过那种一知半解，不明就里的感觉，有点如鲠在喉，不甚舒服，所以花了点时间，research了一番：</p><h2 id="为什么要有-property？"><a href="#为什么要有-property？" class="headerlink" title="为什么要有@property？"></a>为什么要有@property？</h2><p>要搞清楚「特性」，先搞清楚<code>@property</code>，为什么要有<code>@property</code>？</p><p>在2006年的WWDC大会上，苹果发布了Objective-C 2.0，其中就包括<strong><a href="https://en.wikipedia.org/wiki/Objective-C#Properties" target="_blank" rel="external">Properties</a></strong>这个新的语法，把原来的实例变量定义成<strong>Properties(属性)</strong>。这个变化，和以前相比，有什么变化呢？</p><p>###Objective-C2.0之前:</p><p>没有Properties之前，定义实例变量，是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@interface Person : NSObject &#123;</div><div class="line">@public</div><div class="line">    NSString *name;</div><div class="line">@private</div><div class="line">    int age;</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure><p>然后在.h文件，声明setter和getter方法(setter和getter统称「accessors/存取器/访问器」)，再在.m文件实现setter和getter，这样就可以封装起来，供其他类访问(取值、赋值)了。</p><p>然而，即使不使用setter和getter，其他类也可以通过<code>-&gt;</code>来直接访问，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">personA-&gt;name = @&quot;123&quot;;</div><div class="line">   </div><div class="line">NSLog(@&quot;personA-&gt;name:%@&quot;, personA-&gt;name);</div></pre></td></tr></table></figure><p><strong>为什么要getter和setter</strong></p><p>那么，为什么还要如此麻烦地声明和实现setter和getter呢？主要基于三个原因(参考:<a href="https://stackoverflow.com/questions/10425827/please-explain-getter-and-setters-in-objective-c" target="_blank" rel="external">Please explain Getter and Setters in Objective C</a>)：</p><ul><li>可以在getter和setter中添加额外的代码，实现特定的目的。比如赋值前(set)需要实现一些特定的内部计算，或者更新状态，缓存数据等等。</li><li>KVC和KVO都是基于此实现的。</li><li>在非ARC时代，可以在在getter和setter中进行内存管理。</li></ul><p>因此，写getter和setter，可算是Objective-C中「约定俗成」的做法了。（Swift有类似的「Computed Properties/计算属性」）</p><p>所以，在没有<strong>Objective-C2.0</strong>的<code>@property</code>之前，我们几乎需要为所有的实例变量，手动写getter和setter——听听就觉得很可怕，对不对？</p><p>###Objective-C2.0之后:</p><p>庆幸的是，程序员都喜欢「偷懒」，所以就有了2006年Objective-C2.0中的新语法：<strong>Properties</strong>。</p><p><strong>它帮我们自动生成getter和setter</strong>(声明方法，并实现方法。当然，这部分代码并不会出现在你的项目中，是隐藏起来的)。</p><p>不过，<code>@property</code>的写法，也经过数次变迁(新旧写法混在一起，就更让人困惑了)：</p><ul><li>最开始，需要作3件事情：<ul><li>在.h文件，我们用<code>@property</code>声明了属性——这只是帮我们在声明了getter和setter；</li><li>还需要手动声明实例变量(和Objective-C2.0之前一样)</li><li>然后在.m文件，还要用<code>@synthesize</code>自动合成getter和setter的实现。</li></ul></li><li>后来，不需要为属性声明实例变量了，<code>@synthesize</code>会默认自动生成一个「下划线+属性名」的实例变量。比如<code>@property (copy, nonatomic) NSString *name;</code>之后，就可以直接使用<code>_name</code>这个变量了。</li><li>再后来(Xcode4.5开始)，<code>@synthesize</code>也不需要了。一个<code>@property</code>搞定。</li></ul><p>所以，现在我们写<code>@property</code>声明属性，其实是做了三件事</p><ul><li>.h: 声明了getter和setter方法；</li><li>.h: 声明了实例变量(默认:下划线+属性名)；</li><li>.m: 实现了getter和setter方法。</li></ul><p>这就是<code>@property</code>为我们所做的事情。</p><p>知道它为我们做了什么，自然也就能回答：「为什么要有<code>@property</code>？」这个问题了。</p><h2 id="property后面的括号又是怎么回事？"><a href="#property后面的括号又是怎么回事？" class="headerlink" title="@property后面的括号又是怎么回事？"></a>@property后面的括号又是怎么回事？</h2><p><code>@property (copy, nonatomic) NSString *name;</code></p><p>这种写法，大家肯定都写过，不过，后面跟着的这个括号又是什么玩意儿呢？</p><p>官方把括号里面的东西，叫做「attribute/特性」。</p><p>先试一下，把括号里的两个单词都删掉，你会发现，还能正常工作。而事实上，以下两种写法，是等价的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@property () NSString *name;// 或者@property NSString *name;</div><div class="line">@property (atomic, strong, readwrite) NSString *name;</div></pre></td></tr></table></figure><p>因为attribute主要有三种类型(实际上最多可以写6个特性，后面详述)，每种类型都有默认值。如果什么都不写，系统就会取用默认值（看看，苹果良苦用心，偷偷帮我们做了那么多事情）。</p><p>如上所述，attributes有三种类型：</p><h3 id="1-Atomicity-原子性"><a href="#1-Atomicity-原子性" class="headerlink" title="1.Atomicity(原子性)"></a>1.Atomicity(原子性)</h3><p>比较简单的一句话理解就是：是否给setter和getter加锁(是否保证setter或者getter的每次访问是完整性的)。</p><p>原子性，有atomic和nonatomic两个值可选。默认值是atomic(也就是不写的话，默认是atomic)。</p><ul><li><p><strong>atomic</strong>(默认值)</p><p>使用atomic，在一定程度上可以保证线程安全，「atomic的作用只是给getter和setter加了个锁」。也就是说，有线程在访问setter，其他线程只能等待完成后才能访问。</p><p>它能保证：即使多个线程「同时」访问这个变量，atomic会让你得到一个有意义的值(valid value)。但是不能保证你获得的是哪个值（有可能是被其他线程修改过的值，也有可能是没有修改过的值）。</p></li><li><p><strong>nonatomic</strong></p><p>而用nonatomic，则不保证你获得的是有效值，如果像上面所述，读、写两个线程同时访问变量，有可能会给出一个无意义的垃圾值。</p><p>这样对比，atomic就显得比较鸡肋了，因为它并不能完全保证程序层面的线程安全，又有额外的性能耗费(要对getter和setter进行加锁操作，我验证过，在某个小项目中将所有的nonatomic删除，内存占用平均升高1M左右)。</p><p>所以，你会见到，几乎所有情况，我们都用nonatomic。</p></li></ul><h3 id="2-Access-存取特性"><a href="#2-Access-存取特性" class="headerlink" title="2.Access(存取特性)"></a>2.Access(存取特性)</h3><p>存取特性有<strong>readwrite</strong>(默认值)和<strong>readonly</strong>。</p><p>这个从名字看就很容易理解，定义了这个属性是「只读」，还是「读写」皆可。</p><p>如果是<strong>readwrite</strong>，就是告诉编译器，同时生成getter和setter。如果是<strong>readonly</strong>，只生成getter。</p><h3 id="3-Storage-内存管理特性-管理对象的生命周期的"><a href="#3-Storage-内存管理特性-管理对象的生命周期的" class="headerlink" title="3.Storage(内存管理特性)(管理对象的生命周期的)"></a>3.Storage(内存管理特性)(管理对象的生命周期的)</h3><p>最常用到<strong>strong</strong>、<strong>weak</strong>、<strong>assign</strong>、<strong>copy</strong>4个attributes。（还有一个<strong>retain</strong>，不怎么用了）</p><ul><li><p><strong>strong</strong> (默认值)</p><p>ARC新增的特性。</p><p>表明你需要引用(持有)这个对象(reference to the object)，负责保持这个对象的生命周期。</p><p><strong><em>注意，基本数据类型(非对象类型,如int, float, BOOL)，默认值并不是strong，strong只能用于对象类型。</em></strong></p></li></ul><ul><li><p><strong>weak</strong> </p><p>ARC新增的特性。</p><p>也会给你一个引用(reference/pointer)，指向对象。但是不会主张所有权(claim ownership)。也不会增加retain count。</p><p>如果对象A被销毁，所有指向对象A的弱引用(weak reference)(用weak修饰的属性)，都会自动设置为nil。</p><p>在delegate patterns中常用weak解决strong reference cycles(以前叫retain cycles)问题。</p></li><li><p><strong>copy</strong></p><p>为了说明<strong>copy</strong>，我们先举个栗子：</p><p>我在某个类(class1)中声明两个字符串属性，一个用copy，一个不用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@property (copy, nonatomic) NSString *nameCopy;</div><div class="line"></div><div class="line">// 或者可以省略strong, 编译器默认取用strong</div><div class="line">@property (strong, nonatomic) NSString *nameNonCopy;</div></pre></td></tr></table></figure><p>在另一个类中，用一个NSMutableString对这两个属性赋值并打印，再修改这个NSMutableString，再打印，看看会发生什么：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Class1 *testClass1 = [[Class1 alloc] init];</div><div class="line"></div><div class="line">NSMutableString *nameString = [NSMutableString  stringWithFormat:@&quot;Antony&quot;];</div><div class="line"></div><div class="line">// 用赋值NSMutableString给NSString赋值</div><div class="line">testClass1.nameCopy = nameString;</div><div class="line">testClass1.nameNonCopy = nameString;</div><div class="line">   </div><div class="line">NSLog(@&quot;修改nameString前, nameCopy: %@; nameNonCopy: %@&quot;, testClass1.nameCopy, testClass1.nameNonCopy);</div><div class="line"></div><div class="line">[nameString appendString:@&quot;.Wong&quot;];</div><div class="line">   </div><div class="line">NSLog(@&quot;修改nameString后, nameCopy: %@; nameNonCopy: %@&quot;, testClass1.nameCopy, testClass1.nameNonCopy);</div></pre></td></tr></table></figure><p>打印结果是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">修改nameString前, nameCopy: Antony; nameNonCopy: Antony</div><div class="line">修改nameString后, nameCopy: Antony; nameNonCopy: Antony.Wong</div></pre></td></tr></table></figure><p>我只是修改了<code>nameString</code>，为什么<code>testClass1.nameNonCopy</code>的值没改，它也跟着变了？</p><p>因为<code>strong</code>特性，对对象进行引用计数加1，只是对指向对象的指针进行引用计数加1，这时候，<code>nameString</code>和<code>testClass1.nameNonCopy</code>指向的其实是同一个对象(同一块内存)，<code>nameString</code>修改了值，自然影响到<code>testClass1.nameNonCopy</code>。</p><p>而<code>copy</code>这个特性，会在赋值前，复制一个对象，<code>testClass1.nameCopy</code>指向了一个新对象，这时候<code>nameString</code>怎么修改，也不关它啥事了。应用<code>copy</code>特性，系统应该是在setter中进行了如下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (void)setNameCopy:(NSString *)nameCopy &#123;</div><div class="line">    _nameCopy = [nameCopy copy];</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>大家了解<code>copy</code>的作用了吧，是为了防止属性被意外修改的。那什么时候要用到<code>copy</code>呢？</p><p>所有有mutable(可变)版本的属性类型，如NSString, NSArray, NSDictionary等等——他们都有可变的版本类型:NSMutableString, NSMutableArray, NSMutableDictionary。这些类型在属性赋值时，右边的值有可能是它们的可变版本。这样就会出现属性值被意外改变的可能。所以它们都应该用<code>copy</code>。</p><p><strong>扩展</strong></p><p>如果不用<code>copy</code>，而是在赋值前，调用copy方法，可以达到同样的目的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 这时候也可以确保nameNonCopy不会被意外修改</div><div class="line">testClass1.nameNonCopy = [nameString copy];</div></pre></td></tr></table></figure></li></ul><p> <strong>如果用<code>copy</code>修饰NSMutableString、NSMutableArray会发生什么?</strong></p><p> 如果用<code>copy</code>修饰NSMutableString，在赋值的时候会报如下警告：</p><p> <code>Incompatible pointer types assigning to &#39;NSMutableString *&#39; from &#39;NSString *&#39;</code></p><p> 而如果用<code>copy</code>修饰NSMutableArray，则在调用addObject:时直接crash：</p><p> <code>reason: &#39;-[__NSArray0 addObject:]: unrecognized selector sent to instance 0x1700045c0&#39;</code></p><p> 如果理解了「<code>copy</code>特性，就是在setter中，进行了copy操作」，就很容易知道以上报错的原因：属性在赋值时，调用setter，已经将原本mutable的对象，copy成了immutable的对象(NSMutableString变成NSString，NSMutableArray变成NSArray)。</p><ul><li><p><strong>assign</strong></p><p>是非ARC时代的特性，</p><p>它的作用和<strong>weak</strong>类似，唯一区别是：如果对象A被销毁，所有指向这个对象A的<strong>assign</strong>属性并不会自动设置为nil。这时候这些属性就变成野指针，再访问这些属性，程序就会crash。</p><p>因此，在ARC下，<strong>assign</strong>就变成用于修饰基本数据类型(Primitive Type)，也就是非对象/非指针数据类型，如：int、BOOL、float等。</p><p><strong><em>注意，在非ARC时代，还没有strong的时候。assign是默认值。ARC下，默认值变成strong了。这个要注意一下，否则会引起困扰。</em></strong></p></li><li><p><strong>retain</strong></p><p><strong>retain</strong>是以前非ARC时代的特性，在ARC下并不常用。</p><p>它是<strong>strong</strong>的同义词，两者功能一致。不知道为什么还保留着，这对新手也会造成一定困扰。</p></li></ul><p>所以，总结一下。</p><ul><li>几乎所有情况，都写上<strong>nonatomic</strong>；</li><li>对外「只读」的，写上<strong>readonly</strong></li><li>一般的对象属性，写上<strong>strong</strong>（用<strong>retain</strong>也可以，比较少用）</li><li>需要解决strong reference cycles问题的对象属性，strong改为<strong>weak</strong></li><li>有mutable(可变)版本的对象属性，strong改为<strong>copy</strong></li><li>基本数据类型(int, float, BOOL)(非对象属性)，用<strong>assign</strong></li></ul><h3 id="4-扩展"><a href="#4-扩展" class="headerlink" title="4.扩展"></a>4.扩展</h3><p>其实，除了上面3种经常用到的特性类型，还有2种不太见到。</p><ul><li><p><strong>getter=</strong> 和 <strong>setter=</strong></p><p>按字面意思，很容易理解，就是重命名getter和setter方法。</p><p><a href="https://developer.apple.com/library/content/releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html" target="_blank" rel="external">Transitioning to ARC Release Notes</a>中写道：</p><blockquote><p>You cannot give an accessor a name that begins with new. This in turn means that you can’t, for example, declare a property whose name begins with new unless you specify a different getter</p></blockquote></li></ul><p> 存取方法不能以<code>new</code>开头，如果你要以<code>new</code>开头命名一个属性：<code>@property (copy, nonatomic) NSString *newName;</code>于是会默认生成一个new开头的getter方法：</p><p> 这时候就会报错：<code>Property follows Cocoa naming convention for returning &#39;owned&#39; objects</code>。</p><p> 解决办法，就是用<strong>getter=</strong>重命名getter方法：</p><p> <code>@property (copy, nonatomic, getter=theNewName) NSString *newName;</code></p><ul><li><p><strong>Nullability</strong></p><ul><li><strong>nullable</strong>：对象「可为空」</li><li><strong>nonnull</strong>：对象「不可为空」</li><li><strong>null_unspecified</strong>：「未指定」</li><li><strong>null_resettable</strong>：稍有点难理解，就是调用setter去reset属性时，可以传入nil，但是getter返回值，不为空。UIView下面的tintColor，就是null_resettable。这样就保证，即使赋值为nil，也会返回一个非空的值。</li></ul><p>为了更好地和Swift混编(配合Swift的optional类型)，在Xcode 6.3，Objective-C新增了一个语言特性，nullability。具体就是以上4个新特性。</p><p>如果设置为<code>null_resettable</code>，则要重写setter或getter其中之一，自己做判断，确保真正返回的值不是nil。否则报警告：<code>Synthesized setter &#39;setName:&#39; for null_resettable property &#39;name&#39; does not handle nil</code></p><p>Nullability的写法如下：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@property (copy, nullable) NSString *name;</div><div class="line">@property (copy, readonly, nonnull) NSArray *allItems;</div><div class="line"> </div><div class="line">// 也可以将nullable, nonnull, null_unspecified, null_resettable三个修饰语前面加双下划线，用于修饰指针、参数、返回值等(null_resettable只能在属性括号中使用)</div><div class="line">@property (copy, readonly) NSArray * __nonnull allItems;</div></pre></td></tr></table></figure><p>Nullability的默认值：<code>null_unspecified</code>——未指定。如果某个属性填写了Nullability特性(比如写了nonnull)，没有填写Nullability的属性，会出现如下警告：</p><p><code>Pointer is missing a nullability type specifier (_Nonnull, _Nullable, or _Null_unspecified)</code></p><p>但是如果每个属性都一一写上，稍嫌麻烦。而因为大多数属性是<code>nonnull</code>的，所以苹果定义了两个宏，<code>NS_ASSUME_NONNULL_BEGIN</code>和<code>NS_ASSUME_NONNULL_END</code>(两个宏之间，叫做<strong>Audited Regions</strong>)。</p><p>将所有属性包在这两个宏中，就无需写<strong>nonnull</strong>修饰语了，只需要在「可为空」的属性里，写上<strong>nullable</strong>即可：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">NS_ASSUME_NONNULL_BEGIN</div><div class="line">@interface AAPLList : NSObject &lt;NSCoding, NSCopying&gt;</div><div class="line">// 只需要为「不可为空」的参数、属性、返回值加上修饰语nullable即可</div><div class="line">- (nullable AAPLListItem *)itemWithName:(NSString *)name;</div><div class="line">- (NSInteger)indexOfItem:(AAPLListItem *)item;</div><div class="line"></div><div class="line">@property (copy, nullable) NSString *name;</div><div class="line">@property (copy, readonly) NSArray *allItems;</div><div class="line">// ...</div><div class="line">@end</div><div class="line">NS_ASSUME_NONNULL_END</div></pre></td></tr></table></figure></li></ul><p>所以！综上所述，attribute最多可以写6个进去：1.原子性、2.存取特性、3.内存管理特性、4.重命名getter、5.重命名setter，6.nullability：</p><p><code>@property (nonatomic, readonly, copy, getter=theNewTitle, setter=setTheNewTitle:, nullable) NSString *newTitle;</code></p><p>不过，应该没有谁闲得蛋疼会这样写的。</p><p>最短的写法就是什么都不写，连括号都可以不要：</p><p><code>@property BOOL isOpen;</code></p><p>毕。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;先以一图总结：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/298822-a2eb8681c3678f5e.png?imageMogr2/auto-orient/strip%7CimageVi
      
    
    </summary>
    
    
      <category term="Technical" scheme="https://antony138.github.io/tags/Technical/"/>
    
  </entry>
  
  <entry>
    <title>3个bytes, 怎么接?</title>
    <link href="https://antony138.github.io/2017/09/26/3%E4%B8%AAbytes-%E6%80%8E%E4%B9%88%E6%8E%A5/"/>
    <id>https://antony138.github.io/2017/09/26/3个bytes-怎么接/</id>
    <published>2017-09-26T03:09:44.000Z</published>
    <updated>2017-09-26T03:32:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>这个问题，对于熟悉C语言的人来说，答案很简单。</p><p>不过对我这种不熟悉C语言的人，在坑中「摸索」良久，先后尝试好几种方法。</p><p>其实，生活中很多事情也像编程：解决问题的办法有万千，但某些方法确实是比较优雅的。</p><p>在这个「摸索」的过程中，也是一个蛮有趣的过程，遂记之。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在过去的项目中，所接触到的「协议/指令(protocol/command)」，数据大多是以1个byte(字节)，2个bytes，4个bytes，8个bytes……为单位进行切割组合的。类似如下指令：</p><blockquote><p>xxxCommand:</p><ul><li>[1]commandID# 0xFF // 方括号数字：该数据所占字节(byte)数</li><li>[1]week:<ul><li>bit0:Mon</li><li>bit1:Tue</li><li>bit2:Wed</li><li>bit3:Thu</li><li>bit4:Fri</li><li>bit5:Sat</li><li>bit6:Sun</li><li>bit7:不使用</li></ul></li><li>[4]ip address</li><li>[2]reserved</li><li>[1]checksum</li></ul></blockquote><p>这时候，1 byte的数据，用<code>UInt8</code>接，2 bytes的数据，用<code>UInt16</code>接，4 bytes的数据，用<code>UInt32</code>接——一切都很美好。</p><p>关于<code>UInt8</code>、<code>UInt16</code>、<code>UInt32</code>等数据类型，在<code>MacTypes.h</code>中，有相关说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">/********************************************************************************</div><div class="line"></div><div class="line">    Base integer types for all target OS&apos;s and CPU&apos;s</div><div class="line">    </div><div class="line">        UInt8            8-bit unsigned integer </div><div class="line">        SInt8            8-bit signed integer</div><div class="line">        UInt16          16-bit unsigned integer </div><div class="line">        SInt16          16-bit signed integer           </div><div class="line">        UInt32          32-bit unsigned integer </div><div class="line">        SInt32          32-bit signed integer   </div><div class="line">        UInt64          64-bit unsigned integer </div><div class="line">        SInt64          64-bit signed integer   </div><div class="line"></div><div class="line">*********************************************************************************/</div></pre></td></tr></table></figure><p>也有具体定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">typedef unsigned char                   UInt8;</div><div class="line">typedef signed char                     SInt8;</div><div class="line">typedef unsigned short                  UInt16;</div><div class="line">typedef signed short                    SInt16;</div></pre></td></tr></table></figure><p>而最近，遇到一种新情况：硬件那边发过来的数据，是3个bytes为单位的数据——有3个bytes的mac地址(截取了mac地址的一半，发送/广播给手机端)，也有3个bytes的大气压数据。类似如下数据格式：</p><blockquote><p>xxxCommand:</p><ul><li>[2]UUID</li><li>[3]mac // 截取了mac地址的一半</li><li>[3]presure // 据闻大气压数值，2 bytes表示不完，4 bytes又太多了，所以定义了3 bytes～</li><li>…</li></ul></blockquote><p>于是，就有了此文的标题：系统没有UInt24，3个bytes的数据，怎么接？（不要怪我问那么白痴的问题）</p><p>先贴出我所认为的「最优雅」解决方案，再描述一下我「踩坑」的心路历程。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h2><h3 id="1-先定义一个UInt24"><a href="#1-先定义一个UInt24" class="headerlink" title="1.先定义一个UInt24"></a>1.先定义一个<code>UInt24</code></h3><p>关于如何定一个<code>UInt24</code>，StackOverFlow上有人提问：<a href="https://stackoverflow.com/questions/7416699/how-to-define-24bit-data-type-in-c/46390088#46390088" target="_blank" rel="external">How to define 24bit data type in C?</a>。</p><p>尝试过某个回答者的做法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">struct int24&#123;</div><div class="line">    unsigned int data : 24;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>经验证，这个写法不work，因为这个类型还是占4个bytes（用<code>sizeof()</code>函数打印验证），这样拿去接数据，会把别人的那个byte也装过来，后面的数据就会乱掉。</p><p>那试着仿照<code>MacTypes.h</code>里的定义，定义如下：</p><p><code>typedef unsigned char[3] UInt24;</code></p><p>这样OK吗？事实上，也有问题，系统会报如下错误：</p><blockquote><p>Brackets are not allowed here; to declare an array, place the brackets after the identifier. Replace ‘[3] UInt24’ with ‘ UInt24’</p></blockquote><p>报错说得很清楚：方括号放错地方。要定义一个array(数组/数列)，方括号应该放在新定义类型名称的后面：</p><p><code>typedef unsigned char UInt24[3];</code></p><p>这样就OK了。</p><h3 id="2-定义command"><a href="#2-定义command" class="headerlink" title="2.定义command"></a>2.定义command</h3><p>有了对应的「容器」装数据，那接下来可以定义command(指令)了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">typedef struct __attribute__((packed)) &#123;</div><div class="line">    UInt16 UUID;</div><div class="line">    UInt24 mac; // 用自己定义的UInt24接数据 </div><div class="line">    UInt24 pressure;</div><div class="line">&#125; D2MXxxCommand; // D2M: Device to Mobile phone</div></pre></td></tr></table></figure><p>其实到这里，基本就把问题解决了，后面该干嘛干嘛了。但是在获取到数据，显示出来的过程中，有些写法还是刷新了我的认知（主要还是自己对C语言不熟）。</p><ul><li><p><strong>将mac地址的3个bytes转为十六进制形式的字符串</strong></p><p>一开始我用了很复杂的方法，网上查到的方法也大都比较复杂（下面会有叙述）。</p><p>而实际上，只需要一行就OK了：</p><p><code>NSString *macHexString = [NSString stringWithFormat:@&quot;%02X%02X%02X&quot;, cmd-&gt;mac[0], cmd-&gt;mac[1], cmd-&gt;mac[2]];</code></p><p>正常的占位符应该是<code>%X</code>，而这里中间的<code>02</code>，表示该十六进制数限制固定两位数。</p><p>目的是预防这种情况：当第一个byte是小于16的数，只输出1位。例：<code>0x014B5C</code>，如果是用<code>%X</code>，则只输出<code>14B5C</code>；而用<code>%02X</code>，则可输出<code>014B5C</code>。</p><p>直接用<code>%02X</code>，就无须再额外判断第一个byte长度是否小于1，如果小于1，再在前面补个零……</p><p>备注：这个写法，参考了以前公司boss的写法。</p></li></ul><ul><li><p><strong>将pressure(大气压)的3个byte转为十进制浮点数</strong></p><p>比如，我们用UInt24接了一个数：0x0185B2（大气压），要转换为十进制的浮点数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 大气压值 = 十进制值 / 100 </div><div class="line">float pressure = ((cmd-&gt;pressure[0]&lt;&lt;16) + (cmd-&gt;pressure[1]&lt;&lt;8) + cmd-&gt;pressure[2]) * 0.01;</div></pre></td></tr></table></figure><p>因为大气压的值，同事定义为：该十六进制数的十进制形式再除以100。所以，思路就是将该3个独立的byte组合成一个完整的数，再转十进制就OK了。</p><p><code>cmd-&gt;pressure[0]&lt;&lt;16</code>的意思，就是将<code>pressure</code>中第一个byte左移16bit(位)，也就是左移2个byte(字节)的位置——所以操作完后，<code>pressure</code>中第一个byte，从右往左数，就变成是第三个byte了。如下图所示(将0x01往左移16bit(位))：</p><p><img src="https://raw.githubusercontent.com/Antony138/MarkdownPhotos/master/photos/2017articlesPhotos/leftShift16bit.gif" alt="将0x01往左移16bit(位)"></p><p><code>cmd-&gt;pressure[1]&lt;&lt;8</code>也做了类似的事情，将<code>pressure</code>中第二个byte左移8bit(位)，也就是左移1个byte(字节)的位置，如下图(将0x85往左移8bit(位))：</p><p><img src="https://raw.githubusercontent.com/Antony138/MarkdownPhotos/master/photos/2017articlesPhotos/leftShift8bit.gif" alt="将0x85往左移8bit(位)"></p><p>最后把他们加起来，就是我们要的数了：<code>997.62(Hpa)</code>。</p><p>另外,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">float pressure = ((cmd-&gt;pressure1 * 65536) + (cmd-&gt;pressure2 * 256) + cmd-&gt;pressure3) * 0.01</div></pre></td></tr></table></figure><p>也有同样的效果，但个人认为这样操作，没有用<code>&lt;&lt;</code>操作符直观易懂。</p></li></ul><p>以上，就是关于「3个bytes, 怎么接?」的回答。</p><p>接下来描述一下踩过的「坑」。</p><h2 id="其他的尝试"><a href="#其他的尝试" class="headerlink" title="其他的尝试:"></a>其他的尝试:</h2><h3 id="1-定义成3个单独的UInt8"><a href="#1-定义成3个单独的UInt8" class="headerlink" title="1.定义成3个单独的UInt8"></a>1.定义成3个单独的<code>UInt8</code></h3><p>最开始想到，就是单独定义3个<code>UInt8</code>来接数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">UInt8 pressure1;</div><div class="line">UInt8 pressure2;</div><div class="line">UInt8 pressure3;</div></pre></td></tr></table></figure><p>写完这个还「怨气满满」地想：为什么非得要传3个bytes过来，多一个、少一个不行吗？</p><p>这埋怨虽是戏言，但是从「产品、消费者」的角度思考，又可以延伸到另外一件事：我们写的框架、软件、产品，有一个重要的准绳——「把复杂留给自己，把简单留给客户」。大部分人拿到一个东西，肯定希望是「插电即用」的，并不希望东折腾西捣鼓才能使用。</p><p>扯远了，继续：拿到这3个bytes后，第一反应就是<code>NSData</code>对象——于是就变着法把这三个bytes捣鼓成NSData对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 将3个bytes重新组合起来</div><div class="line">Byte pressureBytes[] = &#123;cmd-&gt;pressure1, cmd-&gt;pressure2, cmd-&gt;pressure3&#125;;</div><div class="line">// 转为NSData</div><div class="line">NSData *pressureData = [NSData dataWithBytes:pressureBytes length:sizeof(pressureBytes)];</div></pre></td></tr></table></figure><p>然后又想办法将NSData对象捣鼓成十六进制字符串，或者是十进制的浮点数——硬生生把一行代码搞定的事情，写成了几十行。</p><h3 id="2-定义成UInt8-mac-3"><a href="#2-定义成UInt8-mac-3" class="headerlink" title="2.定义成UInt8 mac[3]"></a>2.定义成<code>UInt8 mac[3]</code></h3><p>定义成<code>UInt8 mac[3]</code>形式，其实这和最上面定义<code>UInt24</code>是类似的，只是最上面的方法起了一个更易于理解的<code>UInt24</code>而已。</p><h3 id="3-用UInt32接数据，再截前面3个bytes"><a href="#3-用UInt32接数据，再截前面3个bytes" class="headerlink" title="3.用UInt32接数据，再截前面3个bytes"></a>3.用<code>UInt32</code>接数据，再截前面3个bytes</h3><p>这种方法也work，不过要注意，<code>UInt32</code>接回来的数据是4bytes，最后一个byte要进行正确处理(正确给到其他需要的地方)，否则后面数据的读取全会乱(少一个byte)。</p><p>另外，还试过定义成<code>char *mac</code>形式，不work，因为<code>sizeof(cmd-&gt;mac)</code>是8，一个指针占用了8 bytes，并不是我们想要的3bytes。</p><p>所以，</p><p>还要继续熟悉C语言。</p><p><strong><em>毕</em></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这个问题，对于熟悉C语言的人来说，答案很简单。&lt;/p&gt;
&lt;p&gt;不过对我这种不熟悉C语言的人，在坑中「摸索」良久，先后尝试好几种方法。&lt;/p&gt;
&lt;p&gt;其实，生活中很多事情也像编程：解决问题的办法有万千，但某些方法确实是比较优雅的。&lt;/p&gt;
&lt;p&gt;在这个「摸索」的过程中，也是一
      
    
    </summary>
    
    
      <category term="Technical" scheme="https://antony138.github.io/tags/Technical/"/>
    
  </entry>
  
  <entry>
    <title>No Title</title>
    <link href="https://antony138.github.io/2017/09/07/%E6%96%B0%E5%BB%BA%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <id>https://antony138.github.io/2017/09/07/新建一篇文章/</id>
    <published>2017-09-07T06:17:47.000Z</published>
    <updated>2017-09-07T12:41:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hi guys, I am Antony, the primary school teacher gave me this name. And…<strong>I am looking for FREEDOM</strong>. This is a lyric from a movie episode: <strong><em>Freedom</em></strong>. Oh, the movie’s name: <strong><em>Django Unchained</em></strong>. In Chinses: 被解放的姜戈.</p><p><img src="https://raw.githubusercontent.com/Antony138/MarkdownPhotos/master/photos/others/WhoAreYou.jpg" alt="Antony"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hi guys, I am Antony, the primary school teacher gave me this name. And…&lt;strong&gt;I am looking for FREEDOM&lt;/strong&gt;. This is a lyric from a
      
    
    </summary>
    
    
      <category term="妄言" scheme="https://antony138.github.io/tags/%E5%A6%84%E8%A8%80/"/>
    
  </entry>
  
</feed>
